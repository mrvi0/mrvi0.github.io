const fs = require('fs');
const path = require('path');

// –ü—Ä–æ—Å—Ç–∞—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è CSS
function minifyCSS(css) {
    return css
        .replace(/\/\*[\s\S]*?\*\//g, '') // –£–¥–∞–ª—è–µ–º –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
        .replace(/\s*{\s*/g, '{') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ {
        .replace(/\s*}\s*/g, '}') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ }
        .replace(/\s*:\s*/g, ':') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ :
        .replace(/\s*;\s*/g, ';') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ ;
        .replace(/\s*,\s*/g, ',') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ ,
        .replace(/;\s*}/g, '}') // –£–±–∏—Ä–∞–µ–º ; –ø–µ—Ä–µ–¥ }
        .trim();
}

// –ü—Ä–æ—Å—Ç–∞—è –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è JS
function minifyJS(js) {
    return js
        .replace(/\/\*[\s\S]*?\*\//g, '') // –£–¥–∞–ª—è–µ–º –º–Ω–æ–≥–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        .replace(/\/\/.*$/gm, '') // –£–¥–∞–ª—è–µ–º –æ–¥–Ω–æ—Å—Ç—Ä–æ—á–Ω—ã–µ –∫–æ–º–º–µ–Ω—Ç–∞—Ä–∏–∏
        .replace(/\s+/g, ' ') // –ó–∞–º–µ–Ω—è–µ–º –º–Ω–æ–∂–µ—Å—Ç–≤–µ–Ω–Ω—ã–µ –ø—Ä–æ–±–µ–ª—ã –Ω–∞ –æ–¥–∏–Ω
        .replace(/\s*{\s*/g, '{') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ {
        .replace(/\s*}\s*/g, '}') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ }
        .replace(/\s*:\s*/g, ':') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ :
        .replace(/\s*;\s*/g, ';') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ ;
        .replace(/\s*,\s*/g, ',') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ ,
        .replace(/\s*\(\s*/g, '(') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ (
        .replace(/\s*\)\s*/g, ')') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ )
        .replace(/\s*\[\s*/g, '[') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ [
        .replace(/\s*\]\s*/g, ']') // –£–±–∏—Ä–∞–µ–º –ø—Ä–æ–±–µ–ª—ã –≤–æ–∫—Ä—É–≥ ]
        .trim();
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ —Ñ–∞–π–ª–æ–≤
function processFile(filePath, minifyFunction) {
    try {
        const content = fs.readFileSync(filePath, 'utf8');
        const minified = minifyFunction(content);
        const dir = path.dirname(filePath);
        const ext = path.extname(filePath);
        const name = path.basename(filePath, ext);
        const minPath = path.join(dir, `${name}.min${ext}`);
        
        fs.writeFileSync(minPath, minified);
        console.log(`‚úÖ –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω: ${filePath} -> ${minPath}`);
        
        // –ü–æ–∫–∞–∑—ã–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —Ñ–∞–π–ª–æ–≤
        const originalSize = fs.statSync(filePath).size;
        const minifiedSize = fs.statSync(minPath).size;
        const savings = ((originalSize - minifiedSize) / originalSize * 100).toFixed(1);
        
        console.log(`   –†–∞–∑–º–µ—Ä: ${originalSize} -> ${minifiedSize} –±–∞–π—Ç (—ç–∫–æ–Ω–æ–º–∏—è: ${savings}%)`);
        
    } catch (error) {
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±—Ä–∞–±–æ—Ç–∫–µ ${filePath}:`, error.message);
    }
}

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è —Ä–µ–∫—É—Ä—Å–∏–≤–Ω–æ–≥–æ –ø–æ–∏—Å–∫–∞ —Ñ–∞–π–ª–æ–≤
function findFiles(dir, extensions) {
    const files = [];
    
    function traverse(currentDir) {
        const items = fs.readdirSync(currentDir);
        
        for (const item of items) {
            const fullPath = path.join(currentDir, item);
            const stat = fs.statSync(fullPath);
            
            if (stat.isDirectory()) {
                traverse(fullPath);
            } else if (stat.isFile()) {
                const ext = path.extname(item);
                if (extensions.includes(ext)) {
                    files.push(fullPath);
                }
            }
        }
    }
    
    traverse(dir);
    return files;
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
function build() {
    console.log('üöÄ –ù–∞—á–∏–Ω–∞–µ–º –º–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—é...\n');
    
    // –ú–∏–Ω–∏—Ñ–∏—Ü–∏—Ä—É–µ–º CSS —Ñ–∞–π–ª—ã
    console.log('üìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º CSS —Ñ–∞–π–ª—ã:');
    const cssFiles = findFiles('./assets/css', ['.css']);
    for (const file of cssFiles) {
        if (!file.includes('.min.css')) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            processFile(file, minifyCSS);
        }
    }
    
    console.log('\nüìù –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º JS —Ñ–∞–π–ª—ã:');
    const jsFiles = findFiles('./assets/js', ['.js']);
    for (const file of jsFiles) {
        if (!file.includes('.min.js')) { // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —É–∂–µ –º–∏–Ω–∏—Ñ–∏—Ü–∏—Ä–æ–≤–∞–Ω–Ω—ã–µ
            processFile(file, minifyJS);
        }
    }
    
    console.log('\n‚úÖ –ú–∏–Ω–∏—Ñ–∏–∫–∞—Ü–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω–∞!');
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –µ—Å–ª–∏ —Ñ–∞–π–ª –≤—ã–∑–≤–∞–Ω –Ω–∞–ø—Ä—è–º—É—é
if (require.main === module) {
    build();
}

module.exports = { build, minifyCSS, minifyJS }; 