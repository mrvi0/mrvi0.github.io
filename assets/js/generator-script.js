document.addEventListener('DOMContentLoaded', () => {
    // === DOM –≠–ª–µ–º–µ–Ω—Ç—ã ===
    const inputs = {
        title: document.getElementById('projTitle'),
        badge: { selector: document.getElementById('badgeTypeSelector'), paramsContainer: document.getElementById('badgeParamsContainer'), addButton: document.getElementById('addBadgeButton'), addedArea: document.getElementById('addedBadgesArea') },
        dynamicBlocksContainer: document.getElementById('dynamicBlocksContainer'), addSectionButton: document.getElementById('addSectionButton'), licenseText: document.getElementById('licenseText')
    };
    const previewOutput = document.getElementById('previewOutput');
    const rawMarkdownOutput = document.getElementById('rawMarkdownOutput');
    const copyButton = document.getElementById('copyMdButton');
    const downloadButton = document.getElementById('downloadMdButton');
    const dynamicBlockTemplate = document.getElementById('dynamic-block-template');
    const langButtons = document.querySelectorAll('.lang-button');

    // === –°–õ–û–í–ê–†–¨ –ü–ï–†–ï–í–û–î–û–í ===
    const translations = {
        // –ö–ª—é—á–∏ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞
        pageTitle: { en: 'Dynamic README Builder | Boost Your GitHub Profile', ru: '–ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä README.md | –£–ª—É—á—à–∏—Ç–µ —Å–≤–æ–π GitHub –ø—Ä–æ—Ñ–∏–ª—å' },
        headerTitle: { en: 'üöÄ Dynamic README Builder', ru: 'üöÄ –ì–µ–Ω–µ—Ä–∞—Ç–æ—Ä README.md' },
        headerSubtitle: { en: 'Create unique and informative README.md!', ru: '–°–æ–∑–¥–∞–≤–∞–π—Ç–µ —É–Ω–∏–∫–∞–ª—å–Ω—ã–µ –∏ –∏–Ω—Ñ–æ—Ä–º–∞—Ç–∏–≤–Ω—ã–µ README.md!' },
        editorTitle: { en: 'Content Editor', ru: '–†–µ–¥–∞–∫—Ç–æ—Ä –ö–æ–Ω—Ç–µ–Ω—Ç–∞' },
        projTitleLabel: { en: 'Project name:', ru: '–ù–∞–∑–≤–∞–Ω–∏–µ –ø—Ä–æ–µ–∫—Ç–∞:' },
        projTitlePlaceholder: { en: 'My Amazing Project', ru: '–ú–æ–π –ü–æ—Ç—Ä—è—Å–∞—é—â–∏–π –ü—Ä–æ–µ–∫—Ç' },
        badgeDesignerLegend: { en: 'Badge Designer', ru: '–ö–æ–Ω—Å—Ç—Ä—É–∫—Ç–æ—Ä –ë–µ–π–¥–∂–µ–π' },
        badgeTemplateLabel: { en: 'Badge Template:', ru: '–®–∞–±–ª–æ–Ω –±–µ–π–¥–∂–∞:' },
        badgeSelectDefault: { en: '-- Select a template --', ru: '-- –í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω --' },
        badgeParamsPlaceholder: { en: '<i>Select a template to see the options.</i>', ru: '<i>–í—ã–±–µ—Ä–∏—Ç–µ —à–∞–±–ª–æ–Ω, —á—Ç–æ–±—ã —É–≤–∏–¥–µ—Ç—å –ø–∞—Ä–∞–º–µ—Ç—Ä—ã.</i>' },
        addBadgeButton: { en: 'Add a badge to the list', ru: '–î–æ–±–∞–≤–∏—Ç—å –ë–µ–π–¥–∂ –≤ —Å–ø–∏—Å–æ–∫' },
        addedBadgesLabel: { en: 'Badges (Markdown):', ru: '–ë–µ–π–¥–∂–∏ (Markdown):' },
        hint: { en: 'Hint', ru: '–ü–æ–¥—Å–∫–∞–∑–∫–∞' }, // –¢–µ–∫—Å—Ç –¥–ª—è —Å–∞–º–æ–≥–æ —Ç—Ä–∏–≥–≥–µ—Ä–∞
        // –ö–ª—é—á –¥–ª—è —Ç—É–ª—Ç–∏–ø–∞ –±–µ–π–¥–∂–µ–π (–º–æ–∂–Ω–æ –æ—Å—Ç–∞–≤–∏—Ç—å –±–µ–∑ –ø–µ—Ä–µ–≤–æ–¥–∞ –∏–ª–∏ –¥–æ–±–∞–≤–∏—Ç—å)
        // badgesHintTooltip: { en: '<p>Paste Markdown...</p>', ru: '<p>–í—Å—Ç–∞–≤—å—Ç–µ Markdown...</p>' },
        addedBadgesPlaceholder: { en: 'Badges of your project...', ru: '–ë–µ–π–¥–∂–∏ –≤–∞—à–µ–≥–æ –ø—Ä–æ–µ–∫—Ç–∞...' },
        customSectionsTitle: { en: 'Custom Sections', ru: '–ö–∞—Å—Ç–æ–º–Ω—ã–µ –°–µ–∫—Ü–∏–∏' },
        addSectionButton: { en: 'Add A New Section', ru: '–î–æ–±–∞–≤–∏—Ç—å –ù–æ–≤—É—é –°–µ–∫—Ü–∏—é' },
        licenseTextLabel: { en: 'The text of the License section:', ru: '–¢–µ–∫—Å—Ç —Ä–∞–∑–¥–µ–ª–∞ –õ–∏—Ü–µ–Ω–∑–∏—è:' },
        licenseTextPlaceholder: { en: 'MIT / See the badge above / See the LICENSE file', ru: 'MIT / –°–º–æ—Ç—Ä–∏—Ç–µ –±–µ–π–¥–∂ –≤—ã—à–µ / –°–º. —Ñ–∞–π–ª LICENSE' },
        adTitle: { en: '‚ú® Support Development / Useful Resources ‚ú®', ru: '‚ú® –ü–æ–¥–¥–µ—Ä–∂–∏—Ç–µ –†–∞–∑—Ä–∞–±–æ—Ç–∫—É / –ü–æ–ª–µ–∑–Ω—ã–µ –†–µ—Å—É—Ä—Å—ã ‚ú®' },
        adHostingStrong: { en: 'üöÄ Need reliable hosting?', ru: 'üöÄ –ù—É–∂–µ–Ω –Ω–∞–¥–µ–∂–Ω—ã–π —Ö–æ—Å—Ç–∏–Ω–≥?' },
        adHostingTry: { en: 'Try', ru: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ' },
        adSupportNote: { en: '(Using partner links helps us keep this tool free. Thank you!)', ru: '(–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ —Å—Å—ã–ª–æ–∫ –ø–∞—Ä—Ç–Ω–µ—Ä–æ–≤ –ø–æ–º–æ–≥–∞–µ—Ç –Ω–∞–º –ø–æ–¥–¥–µ—Ä–∂–∏–≤–∞—Ç—å —ç—Ç–æ—Ç –∏–Ω—Å—Ç—Ä—É–º–µ–Ω—Ç –±–µ—Å–ø–ª–∞—Ç–Ω—ã–º. –°–ø–∞—Å–∏–±–æ!)' },
        copyButton: { en: 'Copy Markdown', ru: '–ö–æ–ø–∏—Ä–æ–≤–∞—Ç—å Markdown' },
        downloadButton: { en: 'Download .md', ru: '–°–∫–∞—á–∞—Ç—å .md' },
        previewTitle: { en: 'Preview README.md', ru: '–ü—Ä–µ–¥–ø—Ä–æ—Å–º–æ—Ç—Ä README.md' },
        generatedTitle: { en: 'Generated Markdown', ru: '–°–≥–µ–Ω–µ—Ä–∏—Ä–æ–≤–∞–Ω–Ω—ã–π Markdown' },
        // --- –ü–µ—Ä–µ–≤–æ–¥—ã –¥–ª—è —à–∞–±–ª–æ–Ω–∞ ---
        moveUpTooltip: { en: 'Move up', ru: '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–≤–µ—Ä—Ö' },
        moveDownTooltip: { en: 'Move down', ru: '–ü–µ—Ä–µ–º–µ—Å—Ç–∏—Ç—å –≤–Ω–∏–∑' },
        removeSectionTooltip: { en: 'Remove section', ru: '–£–¥–∞–ª–∏—Ç—å —Å–µ–∫—Ü–∏—é' },
        sectionTitleLabel: { en: 'Section heading (H2):', ru: '–ó–∞–≥–æ–ª–æ–≤–æ–∫ —Å–µ–∫—Ü–∏–∏ (H2):' },
        selectEmojiTooltip: { en: 'Select Emoji', ru: '–í—ã–±–µ—Ä–∏—Ç–µ Emoji' },
        emojiNone: { en: 'No', ru: '–ù–µ—Ç' },
        sectionTitlePlaceholder: { en: 'Section name', ru: '–ù–∞–∑–≤–∞–Ω–∏–µ —Å–µ–∫—Ü–∏–∏' },
        sectionContentLabel: { en: 'Section Content:', ru: '–°–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏:' },
        sectionContentPlaceholder: { en: 'Write the contents of the section here...', ru: '–ù–∞–ø–∏—à–∏—Ç–µ –∑–¥–µ—Å—å —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ —Å–µ–∫—Ü–∏–∏...' },
        // –î–µ—Ñ–æ–ª—Ç–Ω—ã–µ –∑–Ω–∞—á–µ–Ω–∏—è –∏ —Å–æ–æ–±—â–µ–Ω–∏—è
        projTitleDefault: { en: 'Project Title', ru: '–ù–∞–∑–≤–∞–Ω–∏–µ –ü—Ä–æ–µ–∫—Ç–∞' },
        sectionTitleDefault: { en: 'Section', ru: '–°–µ–∫—Ü–∏—è' },
        licenseSectionTitle: { en: 'License', ru: '–õ–∏—Ü–µ–Ω–∑–∏—è' },
        badgeParamsNoneNeeded: { en: 'No parameters required.', ru: '–ü–∞—Ä–∞–º–µ—Ç—Ä—ã –Ω–µ —Ç—Ä–µ–±—É—é—Ç—Å—è.' },
        markdownRenderError: { en: 'Markdown Rendering Error:', ru: '–û—à–∏–±–∫–∞ —Ä–µ–Ω–¥–µ—Ä–∏–Ω–≥–∞ Markdown:' },
        copiedSuccess: { en: 'Copied!', ru: '–°–∫–æ–ø–∏—Ä–æ–≤–∞–Ω–æ!' },
        copyError: { en: 'Copy Error', ru: '–û—à–∏–±–∫–∞ –∫–æ–ø–∏—Ä–æ–≤–∞–Ω–∏—è' },
        copyManual: { en: 'Failed to copy. Please copy manually.', ru: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å. –ü–æ–∂–∞–ª—É–π—Å—Ç–∞, —Å–∫–æ–ø–∏—Ä—É–π—Ç–µ –≤—Ä—É—á–Ω—É—é.' },
        downloadError: { en: 'Failed to create download file.', ru: '–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å —Ñ–∞–π–ª –¥–ª—è —Å–∫–∞—á–∏–≤–∞–Ω–∏—è.' },
        footerMadeWith: { en: 'Dynamic README Builder - Made with ‚ù§Ô∏è and a little Gemini', ru: 'Dynamic README Builder - –°–¥–µ–ª–∞–Ω–æ —Å ‚ù§Ô∏è –∏ –Ω–µ–º–Ω–æ–≥–æ Gemini' },
    };

    // === –û–ü–†–ï–î–ï–õ–ï–ù–ò–ï –Ø–ó–´–ö–ê ===
    let currentLang = localStorage.getItem('preferredLang') || 'en'; // –ê–Ω–≥–ª–∏–π—Å–∫–∏–π –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
    if (currentLang !== 'en' && currentLang !== 'ru') {
        currentLang = 'en';
    }

    // === –§–£–ù–ö–¶–ò–Ø –ü–ï–†–ï–í–û–î–ê ===
    function setLanguage(lang) {
        currentLang = lang;
        localStorage.setItem('preferredLang', lang);
        document.documentElement.lang = lang;

        langButtons.forEach(btn => {
            btn.classList.toggle('active', btn.dataset.lang === lang);
        });

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º –í–°–ï —ç–ª–µ–º–µ–Ω—Ç—ã —Å –∞—Ç—Ä–∏–±—É—Ç–∞–º–∏
        const elements = document.querySelectorAll('[data-translate-key], [data-translate-placeholder-key], [data-translate-title]');
        elements.forEach(el => {
            translateElement(el, lang);
        });

        // –û–±–Ω–æ–≤–ª—è–µ–º –ø–∞—Ä–∞–º–µ—Ç—Ä—ã –±–µ–π–¥–∂–µ–π, –µ—Å–ª–∏ –≤—ã–±—Ä–∞–Ω—ã
        displayBadgeParams();

        updatePreview();
    }

    // **–ò–°–ü–†–ê–í–õ–ï–ù–ù–ê–Ø** –≤—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–µ—Ä–µ–≤–æ–¥–∞ –æ–¥–Ω–æ–≥–æ —ç–ª–µ–º–µ–Ω—Ç–∞
    function translateElement(el, lang) {
         const key = el.dataset.translateKey;
         const placeholderKey = el.dataset.translatePlaceholderKey;
         const titleKey = el.dataset.translateTitle;

         // –ü–µ—Ä–µ–≤–æ–¥ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ —Ç–µ–∫—Å—Ç–∞/HTML
         if (key && translations[key]) {
            const translation = translations[key][lang] || translations[key]['en']; // –ü–æ–ª—É—á–∞–µ–º –Ω—É–∂–Ω—ã–π –ø–µ—Ä–µ–≤–æ–¥

            // –°–ü–ï–¶–ò–ê–õ–¨–ù–ê–Ø –û–ë–†–ê–ë–û–¢–ö–ê –î–õ–Ø –¢–†–ò–ì–ì–ï–†–ê –¢–£–õ–¢–ò–ü–ê
            if (el.classList.contains('tooltip-trigger')) {
                // –ò—â–µ–º –ø–µ—Ä–≤—ã–π —Ç–µ–∫—Å—Ç–æ–≤—ã–π —É–∑–µ–ª –≤–Ω—É—Ç—Ä–∏ span –∏ –∑–∞–º–µ–Ω—è–µ–º –µ–≥–æ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ
                for (let i = 0; i < el.childNodes.length; i++) {
                    if (el.childNodes[i].nodeType === Node.TEXT_NODE) {
                        el.childNodes[i].nodeValue = translation; // –ú–µ–Ω—è–µ–º —Ç–æ–ª—å–∫–æ —Ç–µ–∫—Å—Ç "Hint"/"–ü–æ–¥—Å–∫–∞–∑–∫–∞"
                        break; // –ù–∞—à–ª–∏ –∏ –∏–∑–º–µ–Ω–∏–ª–∏, –≤—ã—Ö–æ–¥–∏–º
                    }
                }
                // –ï—Å–ª–∏ —Ç–µ–∫—Å—Ç–æ–≤–æ–≥–æ —É–∑–ª–∞ –Ω–µ—Ç (–º–∞–ª–æ–≤–µ—Ä–æ—è—Ç–Ω–æ), –º–æ–∂–Ω–æ –¥–æ–±–∞–≤–∏—Ç—å
                // else { el.insertBefore(document.createTextNode(translation), el.firstChild); }
            }
            // –û–±—Ä–∞–±–æ—Ç–∫–∞ –¥–ª—è –≤—Å–µ—Ö –æ—Å—Ç–∞–ª—å–Ω—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–æ–≤
            else {
                 if (translation.includes('<')) { // –ï—Å–ª–∏ –ø–µ—Ä–µ–≤–æ–¥ —Å–æ–¥–µ—Ä–∂–∏—Ç HTML
                     el.innerHTML = translation;
                 } else {
                     el.textContent = translation;
                 }
            }
         }
         // –ü–µ—Ä–µ–≤–æ–¥ –ø–ª–µ–π—Å—Ö–æ–ª–¥–µ—Ä–∞
         if (placeholderKey && translations[placeholderKey]) {
             el.placeholder = translations[placeholderKey][lang] || translations[placeholderKey]['en'];
         }
         // –ü–µ—Ä–µ–≤–æ–¥ title
         if (titleKey && translations[titleKey]) {
            el.title = translations[titleKey][lang] || translations[titleKey]['en'];
         }
    }

    // === –û–ü–ò–°–ê–ù–ò–Ø –¢–ò–ü–û–í –ë–ï–ô–î–ñ–ï–ô ===
    const badgeDefinitions = { /* ... –ü–æ–ª–Ω—ã–π –æ–±—ä–µ–∫—Ç badgeDefinitions ... */
        simple: { name: "Static", params: [ { id: 'l', label: 'Label', placeholder: 'label' }, { id: 'm', label: 'Message', placeholder: 'message' }, { id: 'c', label: 'Color', placeholder: 'blue' }, { id: 's', label: 'Style', placeholder: 'flat-square'}, { id: 'logo', label: 'Logo', placeholder: 'github' }, { id: 'link', label: 'Link URL', placeholder: 'https://...' } ], generate: (p) => { const l=p.l||'', m=p.m||'', c=p.c||'lightgrey', s=p.s?`style=${encodeURIComponent(p.s)}`:'style=flat-square', o=p.logo?`&logo=${encodeURIComponent(p.logo)}&logoColor=white`:'', u=`https://img.shields.io/badge/${encodeURIComponent(l)}-${encodeURIComponent(m)}-${encodeURIComponent(c)}.svg?${s}${o}`, a=l||m||'badge'; return p.link?`[![${a}](${u})](${p.link})`:`![${a}](${u})`; } },
        custom_url: { name: "Own Image URL", params: [ { id: 'img', label: 'Badge Image URL', placeholder: 'https://img.shields.io/...' }, { id: 'alt', label: 'Alt text', placeholder: 'Description' }, { id: 'link', label: 'Link URL', placeholder: 'https://...' } ], generate: (p) => { if (!p.img) return '<!--? Image URL -->'; const a = p.alt || 'Badge'; return p.link ? `[![${a}](${p.img})](${p.link})` : `![${a}](${p.img})`; } },
        github_license: { name: "License", params: [ { id: 'u', label: 'User/Org', placeholder: 'user' }, { id: 'r', label: 'Repo', placeholder: 'repo' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; return `[![License](https://img.shields.io/github/license/${p.u}/${p.r}?style=flat-square)](https://github.com/${p.u}/${p.r}/blob/main/LICENSE)`; } },
        github_actions: { name: "Actions status", params: [ { id: 'u', label: 'User/Org', placeholder: 'user' }, { id: 'r', label: 'Repo', placeholder: 'repo' }, { id: 'w', label: 'Workflow File', placeholder: 'ci.yml' }, { id: 'b', label: 'Branch (opt)', placeholder: 'main' } ], generate: (p) => { if (!p.u||!p.r||!p.w) return '<!--? User, Repo, Workflow -->'; const bq=p.b?`?branch=${encodeURIComponent(p.b)}`:'', wf=encodeURIComponent(p.w), u=`https://img.shields.io/github/actions/workflow/status/${p.u}/${p.r}/${wf}${bq}&style=flat-square`, l=`https://github.com/${p.u}/${p.r}/actions/workflows/${wf}`; return `[![${p.w}](${u})](${l})`; } },
        github_issues: { name: "Issues", params: [ { id: 'u', label: 'User/Org', placeholder: 'user' }, { id: 'r', label: 'Repo', placeholder: 'repo' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; return `[![GitHub issues](https://img.shields.io/github/issues/${p.u}/${p.r}?style=flat-square)](https://github.com/${p.u}/${p.r}/issues)`; } },
        github_prs: { name: "Pull Requests", params: [ { id: 'u', label: 'User/Org', placeholder: 'user' }, { id: 'r', label: 'Repo', placeholder: 'repo' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; return `[![GitHub PRs](https://img.shields.io/github/issues-pr/${p.u}/${p.r}?style=flat-square)](https://github.com/${p.u}/${p.r}/pulls)`; } },
        github_stars: { name: "Stars", params: [ { id: 'u', label: 'User/Org', placeholder: 'user' }, { id: 'r', label: 'Repo', placeholder: 'repo' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; return `[![GitHub stars](https://img.shields.io/github/stars/${p.u}/${p.r}?style=social)](https://github.com/${p.u}/${p.r}/stargazers)`; } },
        github_forks: { name: "Forks", params: [ { id: 'u', label: 'User/Org', placeholder: 'user' }, { id: 'r', label: 'Repo', placeholder: 'repo' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; return `[![GitHub forks](https://img.shields.io/github/forks/${p.u}/${p.r}?style=social)](https://github.com/${p.u}/${p.r}/network)`; } },
        github_watchers: { name: "Watchers", params: [ { id: 'u', label: 'User/Org', placeholder: 'user' }, { id: 'r', label: 'Repo', placeholder: 'repo' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; return `[![GitHub watchers](https://img.shields.io/github/watchers/${p.u}/${p.r}?style=social)](https://github.com/${p.u}/${p.r}/watchers)`; } },
        github_last_commit: { name: "Last commit", params: [ { id: 'u', label: 'User/Org', placeholder: 'user' }, { id: 'r', label: 'Repo', placeholder: 'repo' }, { id: 'b', label: 'Branch (opt)', placeholder: 'main' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; return `![GitHub last commit](https://img.shields.io/github/last-commit/${p.u}/${p.r}${p.b?'/'+p.b:''}?style=flat-square)`; } },
        github_release: { name: "Latest release", params: [ { id: 'u', label: 'User/Org', placeholder: 'user' }, { id: 'r', label: 'Repo', placeholder: 'repo' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; return `[![GitHub release (latest by date)](https://img.shields.io/github/v/release/${p.u}/${p.r}?style=flat-square)](https://github.com/${p.u}/${p.r}/releases/latest)`; } },
        github_contributors: { name: "Contributors", params: [ { id: 'u', label: 'User/Org', placeholder: 'user' }, { id: 'r', label: 'Repo', placeholder: 'repo' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; return `[![GitHub contributors](https://img.shields.io/github/contributors/${p.u}/${p.r}?style=flat-square)](https://github.com/${p.u}/${p.r}/graphs/contributors)`; } },
        github_repo_size: { name: "Repository size", params: [ { id: 'u', label: 'User/Org', placeholder: 'user' }, { id: 'r', label: 'Repo', placeholder: 'repo' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; return `![GitHub repo size](https://img.shields.io/github/repo-size/${p.u}/${p.r}?style=flat-square)`; } },
        github_downloads: { name: "Release Downloads", params: [ { id: 'u', label: 'User/Org', placeholder: 'user' }, { id: 'r', label: 'Repo', placeholder: 'repo' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; return `[![Github All Releases](https://img.shields.io/github/downloads/${p.u}/${p.r}/total?style=flat-square)](https://github.com/${p.u}/${p.r}/releases)`; } },
        npm_version: { name: "Version", params: [ { id: 'pkg', label: 'Package Name', placeholder: 'package' } ], generate: (p) => { if (!p.pkg) return '<!--? Package -->'; const P=encodeURIComponent(p.pkg); return `[![npm version](https://img.shields.io/npm/v/${P}?style=flat-square)](https://www.npmjs.com/package/${P})`; } },
        npm_downloads_m: { name: "Downloads (month)", params: [ { id: 'pkg', label: 'Package Name', placeholder: 'package' } ], generate: (p) => { if (!p.pkg) return '<!--? Package -->'; const P=encodeURIComponent(p.pkg); return `[![npm downloads](https://img.shields.io/npm/dm/${P}?style=flat-square)](https://www.npmjs.com/package/${P})`; } },
        npm_downloads_w: { name: "Downloads (week)", params: [ { id: 'pkg', label: 'Package Name', placeholder: 'package' } ], generate: (p) => { if (!p.pkg) return '<!--? Package -->'; const P=encodeURIComponent(p.pkg); return `[![npm downloads](https://img.shields.io/npm/dw/${P}?style=flat-square)](https://www.npmjs.com/package/${P})`; } },
        npm_downloads_y: { name: "Downloads (year)", params: [ { id: 'pkg', label: 'Package Name', placeholder: 'package' } ], generate: (p) => { if (!p.pkg) return '<!--? Package -->'; const P=encodeURIComponent(p.pkg); return `[![npm downloads](https://img.shields.io/npm/dy/${P}?style=flat-square)](https://www.npmjs.com/package/${P})`; } },
        npm_license: { name: "License", params: [ { id: 'pkg', label: 'Package Name', placeholder: 'package' } ], generate: (p) => { if (!p.pkg) return '<!--? Package -->'; return `![npm license](https://img.shields.io/npm/l/${encodeURIComponent(p.pkg)}?style=flat-square)`; } },
        bundlephobia_minzip: { name: "Size (minzip)", params: [ { id: 'pkg', label: 'Package Name', placeholder: 'package' } ], generate: (p) => { if (!p.pkg) return '<!--? Package -->'; const P=encodeURIComponent(p.pkg); return `[![Bundlephobia](https://img.shields.io/bundlephobia/minzip/${P}?style=flat-square)](https://bundlephobia.com/package/${P})`; } },
        bundlephobia_min: { name: "Size (min)", params: [ { id: 'pkg', label: 'Package Name', placeholder: 'package' } ], generate: (p) => { if (!p.pkg) return '<!--? Package -->'; const P=encodeURIComponent(p.pkg); return `[![Bundlephobia](https://img.shields.io/bundlephobia/min/${P}?style=flat-square)](https://bundlephobia.com/package/${P})`; } },
        codecov: { name: "Codecov Coverage", params: [ { id: 's', label: 'Service (github, ...)', placeholder: 'github'}, { id: 'u', label: 'User/Org', placeholder: 'user' }, { id: 'r', label: 'Repo', placeholder: 'repo' } ], generate: (p) => { if (!p.s||!p.u||!p.r) return '<!--? Service, User, Repo -->'; return `[![codecov](https://img.shields.io/codecov/c/${p.s}/${p.u}/${p.r}?style=flat-square)](https://codecov.io/${p.s}/${p.u}/${p.r})`; } },
        codefactor: { name: "CodeFactor Grade", params: [ { id: 'u', label: 'User/Org (GitHub)', placeholder: 'user' }, { id: 'r', label: 'Repo (GitHub)', placeholder: 'repo' }, { id: 'b', label: 'Branch (opt)', placeholder: 'main' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; const br=p.b?`/branch/${p.b}`:''; return `[![CodeFactor](https://www.codefactor.io/repository/github/${p.u}/${p.r}/badge${br}?style=flat-square)](https://www.codefactor.io/repository/github/${p.u}/${p.r}${br})`; } },
        sonar_quality: { name: "SonarQube Quality Gate", params: [ { id: 'h', label: 'Sonar Host URL', placeholder: 'https://sonarcloud.io'}, { id: 'k', label: 'Project Key', placeholder: 'project_key' }, { id: 'b', label: 'Branch (opt)', placeholder: 'main' } ], generate: (p) => { if (!p.h||!p.k) return '<!--? Host, Key -->'; try { const host=new URL(p.h).hostname; const br=p.b?`&branch=${encodeURIComponent(p.b)}`:''; return `[![Quality Gate Status](https://${host}/api/project_badges/measure?project=${encodeURIComponent(p.k)}&metric=alert_status${br})](https://${host}/dashboard?id=${encodeURIComponent(p.k)})`; } catch { return '<!-- Invalid Host URL -->'; } } },
        travis_ci: { name: "Travis CI", params: [ { id: 'u', label: 'User/Org', placeholder: 'user' }, { id: 'r', label: 'Repo', placeholder: 'repo' }, { id: 'b', label: 'Branch (opt)', placeholder: 'main' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; const br=p.b?`?branch=${p.b}`:''; return `[![Travis (.com)](https://img.shields.io/travis/com/${p.u}/${p.r}${br}?style=flat-square)](https://app.travis-ci.com/github/${p.u}/${p.r})`; } },
        circle_ci: { name: "CircleCI", params: [ { id: 'vcs', label: 'VCS (github, bitbucket)', placeholder: 'github' }, { id: 'u', label: 'User/Org', placeholder: 'user' }, { id: 'r', label: 'Repo', placeholder: 'repo' }, { id: 'b', label: 'Branch (opt)', placeholder: 'main' } ], generate: (p) => { if (!p.vcs||!p.u||!p.r) return '<!--? VCS, User, Repo -->'; const br=p.b?`/tree/${p.b}`:''; return `[![CircleCI](https://img.shields.io/circleci/build/${p.vcs}/${p.u}/${p.r}${p.b?`?branch=${p.b}`:''}&style=flat-square)](https://circleci.com/${p.vcs}/${p.u}/${p.r}${br})`; } },
        dep_status: { name: "David DM (Dependencies)", params: [ { id: 'u', label: 'User/Org (GitHub)', placeholder: 'user' }, { id: 'r', label: 'Repo (GitHub)', placeholder: 'repo' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; return `[![dependencies Status](https://david-dm.org/${p.u}/${p.r}/status.svg)](https://david-dm.org/${p.u}/${p.r})`; } },
        dep_dev_status: { name: "David DM (Dev Dependencies)", params: [ { id: 'u', label: 'User/Org (GitHub)', placeholder: 'user' }, { id: 'r', label: 'Repo (GitHub)', placeholder: 'repo' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; return `[![devDependencies Status](https://david-dm.org/${p.u}/${p.r}/dev-status.svg)](https://david-dm.org/${p.u}/${p.r}?type=dev)`; } },
        snyk_vulnerabilities: { name: "Snyk Vulnerabilities", params: [ { id: 'u', label: 'User/Org (GitHub)', placeholder: 'user' }, { id: 'r', label: 'Repo (GitHub)', placeholder: 'repo' } ], generate: (p) => { if (!p.u||!p.r) return '<!--? User, Repo -->'; return `[![Known Vulnerabilities](https://snyk.io/test/github/${p.u}/${p.r}/badge.svg)](https://snyk.io/test/github/${p.u}/${p.r})`; } },
        twitter_follow: { name: "Twitter Follow", params: [ { id: 'user', label: 'Twitter Username', placeholder: 'username' } ], generate: (p) => { if (!p.user) return '<!--? Username -->'; return `[![Twitter Follow](https://img.shields.io/twitter/follow/${encodeURIComponent(p.user)}?style=social)](https://twitter.com/intent/follow?screen_name=${encodeURIComponent(p.user)})`; } },
        patreon: { name: "Patreon", params: [ { id: 'user', label: 'Patreon Username', placeholder: 'username' } ], generate: (p) => { if (!p.user) return '<!--? Username -->'; return `[![Patreon](https://img.shields.io/badge/Patreon-Support-orange?style=flat-square&logo=patreon)](https://patreon.com/${encodeURIComponent(p.user)})`; } },
        opencollective: { name: "Open Collective", params: [ { id: 'collective', label: 'Collective Slug', placeholder: 'collective' } ], generate: (p) => { if (!p.collective) return '<!--? Collective -->'; return `[![Open Collective](https://img.shields.io/opencollective/all/${encodeURIComponent(p.collective)}?style=flat-square&logo=open-collective)](https://opencollective.com/${encodeURIComponent(p.collective)})`; } },
        discord: { name: "Discord", params: [ { id: 'invite', label: 'Invite Code', placeholder: 'inviteCode' } ], generate: (p) => { if (!p.invite) return '<!--? Invite Code -->'; return `[![Discord](https://img.shields.io/discord/${encodeURIComponent(p.invite)}?style=flat-square&logo=discord&logoColor=white)](https://discord.gg/${encodeURIComponent(p.invite)})`; } },
        prs_welcome: { name: "PRs Welcome", params: [], generate: () => `[![PRs Welcome](https://img.shields.io/badge/PRs-welcome-brightgreen.svg?style=flat-square)](http://makeapullrequest.com)` }

     };

    // === –õ–û–ì–ò–ö–ê –ö–û–ù–°–¢–†–£–ö–¢–û–†–ê –ë–ï–ô–î–ñ–ï–ô ===
    function displayBadgeParams() {
        const selectedType = inputs.badge.selector.value;
        const definition = badgeDefinitions[selectedType];
        const container = inputs.badge.paramsContainer;
        container.innerHTML = ''; // –û—á–∏—â–∞–µ–º

        if (definition) {
            if (definition.params.length > 0) {
                definition.params.forEach(param => {
                    const group = document.createElement('div');
                    group.className = 'param-group';
                    const label = document.createElement('label');
                    label.htmlFor = param.id;
                    // –ü—ã—Ç–∞–µ–º—Å—è –Ω–∞–π—Ç–∏ –∫–ª—é—á –ø–µ—Ä–µ–≤–æ–¥–∞ –¥–ª—è label, –µ—Å–ª–∏ –Ω–µ—Ç - –∏—Å–ø–æ–ª—å–∑—É–µ–º –æ—Ä–∏–≥–∏–Ω–∞–ª
                    const labelKey = param.label.toLowerCase().replace(/[^a-z0-9_]/gi, '_'); // –ü—Ä–∏–º–µ—Ä –≥–µ–Ω–µ—Ä–∞—Ü–∏–∏ –∫–ª—é—á–∞
                    label.textContent = (translations[labelKey] && translations[labelKey][currentLang]) || param.label + ':';
                    const input = document.createElement('input');
                    input.type = 'text';
                    input.id = param.id;
                    input.name = param.id;
                    input.placeholder = param.placeholder || '';
                    group.appendChild(label);
                    group.appendChild(input);
                    container.appendChild(group);
                });
            } else {
                 const noParamsKey = 'badgeParamsNoneNeeded';
                 container.innerHTML = `<p><i>${translations[noParamsKey]?.[currentLang] || 'No parameters required.'}</i></p>`;
            }
            inputs.badge.addButton.disabled = false;
        } else {
             container.innerHTML = translations['badgeParamsPlaceholder']?.[currentLang] || '<i>Select a template to see the options.</i>';
            inputs.badge.addButton.disabled = true;
        }
    }
    function addBadgeToArea() {
        const selectedType = inputs.badge.selector.value;
        const definition = badgeDefinitions[selectedType];
        if (!definition) return;
        const params = {};
        const paramInputs = inputs.badge.paramsContainer.querySelectorAll('input');
        paramInputs.forEach(input => { params[input.id] = input.value.trim(); });
        const markdown = definition.generate(params);
        const currentContent = inputs.badge.addedArea.value;
        inputs.badge.addedArea.value = currentContent + (currentContent ? ' ' : '') + markdown;
        inputs.badge.addedArea.dispatchEvent(new Event('input'));
    }
    inputs.badge.selector.addEventListener('change', displayBadgeParams);
    inputs.badge.addButton.addEventListener('click', addBadgeToArea);

    // === –õ–û–ì–ò–ö–ê –î–ò–ù–ê–ú–ò–ß–ï–°–ö–ò–• –ë–õ–û–ö–û–í ===
    function addSectionBlock() {
        if (!dynamicBlockTemplate) { console.error("Template #dynamic-block-template –Ω–µ –Ω–∞–π–¥–µ–Ω!"); return; }
        const newBlock = dynamicBlockTemplate.content.cloneNode(true).firstElementChild;

        // –ü–µ—Ä–µ–≤–æ–¥–∏–º —ç–ª–µ–º–µ–Ω—Ç—ã –í–ù–£–¢–†–ò –Ω–æ–≤–æ–≥–æ –±–ª–æ–∫–∞ –°–†–ê–ó–£ –ü–û–°–õ–ï –∫–ª–æ–Ω–∏—Ä–æ–≤–∞–Ω–∏—è
        const elementsToTranslate = newBlock.querySelectorAll('[data-translate-key], [data-translate-placeholder-key], [data-translate-title]');
        elementsToTranslate.forEach(el => translateElement(el, currentLang));

        inputs.dynamicBlocksContainer.appendChild(newBlock);
        attachBlockListeners(newBlock); // –ù–∞–∑–Ω–∞—á–∞–µ–º —Å–ª—É—à–∞—Ç–µ–ª–∏ –ü–û–°–õ–ï –ø–µ—Ä–µ–≤–æ–¥–∞
        updatePreview();
    }
    function removeSectionBlock(button) {
        const blockToRemove = button.closest('.dynamic-block');
        if (blockToRemove) { blockToRemove.remove(); updatePreview(); }
    }
    function moveSectionBlockUp(button) {
        const blockToMove = button.closest('.dynamic-block');
        const previousBlock = blockToMove?.previousElementSibling;
        if (previousBlock) { inputs.dynamicBlocksContainer.insertBefore(blockToMove, previousBlock); updatePreview(); }
    }
    function moveSectionBlockDown(button) {
        const blockToMove = button.closest('.dynamic-block');
        const nextBlock = blockToMove?.nextElementSibling;
        if (nextBlock) { inputs.dynamicBlocksContainer.insertBefore(nextBlock, blockToMove); updatePreview(); }
    }

    // –ï–î–ò–ù–°–¢–í–ï–ù–ù–ê–Ø –í–ï–†–°–ò–Ø attachBlockListeners
    function attachBlockListeners(blockElement) {
        const moveUpBtn = blockElement.querySelector('.move-up');
        const moveDownBtn = blockElement.querySelector('.move-down');
        const removeBtn = blockElement.querySelector('.remove-block');
        const emojiSelect = blockElement.querySelector('.section-emoji');
        const titleInput = blockElement.querySelector('.section-title');
        const contentTextarea = blockElement.querySelector('.section-content');

        if (moveUpBtn) moveUpBtn.addEventListener('click', () => moveSectionBlockUp(moveUpBtn));
        if (moveDownBtn) moveDownBtn.addEventListener('click', () => moveSectionBlockDown(moveDownBtn));
        if (removeBtn) removeBtn.addEventListener('click', () => removeSectionBlock(removeBtn));
        if (emojiSelect) emojiSelect.addEventListener('change', updatePreview); // –ò—Å–ø–æ–ª—å–∑—É–µ–º change –¥–ª—è select
        if (titleInput) titleInput.addEventListener('input', updatePreview);
        if (contentTextarea) contentTextarea.addEventListener('input', updatePreview);
    }
    inputs.addSectionButton.addEventListener('click', addSectionBlock);
    inputs.dynamicBlocksContainer.querySelectorAll('.dynamic-block').forEach(attachBlockListeners); // –î–ª—è –Ω–∞—á–∞–ª—å–Ω—ã—Ö –±–ª–æ–∫–æ–≤, –µ—Å–ª–∏ –æ–Ω–∏ –µ—Å—Ç—å

    // === –ì–ï–ù–ï–†–ê–¶–ò–Ø –ò –û–ë–ù–û–í–õ–ï–ù–ò–ï README ===
    function generateMarkdown() {
        let md = '';
        const projTitleKey = 'projTitleDefault';
        md += `# ${inputs.title.value.trim() || (translations[projTitleKey]?.[currentLang] || 'Project Title')}\n\n`;
        const badgeMarkdown = inputs.badge.addedArea.value.trim();
        if (badgeMarkdown) { md += `${badgeMarkdown}\n\n`; }
        if (badgeMarkdown || inputs.dynamicBlocksContainer.children.length > 0 || inputs.licenseText.value.trim()) { md += `---\n\n`; }
        const dynamicBlocks = inputs.dynamicBlocksContainer.querySelectorAll('.dynamic-block');
        dynamicBlocks.forEach(block => {
            const emoji = block.querySelector('.section-emoji')?.value || '';
            const title = block.querySelector('.section-title')?.value.trim() || '';
            const content = block.querySelector('.section-content')?.value.trim() || '';
            let sectionTitle = '';
            const defaultSectionTitleKey = 'sectionTitleDefault';
            if (emoji || title) { sectionTitle = `## ${emoji ? emoji + ' ' : ''}${title || (translations[defaultSectionTitleKey]?.[currentLang] || 'Section')}\n\n`; }
            if (sectionTitle || content) { md += sectionTitle; md += `${content}\n\n`; }
        });
        const licenseText = inputs.licenseText.value.trim();
        if (licenseText) {
             if (dynamicBlocks.length > 0) { md += `---\n\n`; }
             const licenseSectionTitleKey = 'licenseSectionTitle';
             md += `## üìú ${translations[licenseSectionTitleKey]?.[currentLang] || 'License'}\n\n${licenseText}\n`;
        }
        return md.trim();
    }
    function updatePreview() {
        const markdownContent = generateMarkdown();
        rawMarkdownOutput.value = markdownContent;
        try {
             const dirtyHtml = marked.parse(markdownContent);
             const cleanHtml = DOMPurify.sanitize(dirtyHtml, { USE_PROFILES: { html: true } });
             previewOutput.innerHTML = cleanHtml;
        } catch (e) {
             const errorMsgKey = 'markdownRenderError';
             previewOutput.innerHTML = `<p style="color: red; font-weight: bold;">${translations[errorMsgKey]?.[currentLang] || 'Markdown Rendering Error:'}</p><pre>${e.message}</pre>`;
             console.error("Markdown rendering error:", e);
         }
    }

    // === –ù–ê–ó–ù–ê–ß–ï–ù–ò–ï –û–ë–©–ò–• –û–ë–†–ê–ë–û–¢–ß–ò–ö–û–í –°–û–ë–´–¢–ò–ô ===
    const allStaticInputs = [ inputs.title, inputs.badge.addedArea, inputs.licenseText ];
    allStaticInputs.forEach(input => { if (input) { input.addEventListener('input', updatePreview); } });

    // === –û–ë–†–ê–ë–û–¢–ß–ò–ö–ò –ö–ù–û–ü–û–ö ===
    langButtons.forEach(button => { button.addEventListener('click', () => { setLanguage(button.dataset.lang); }); });
    copyButton.addEventListener('click', () => {
        rawMarkdownOutput.select(); rawMarkdownOutput.setSelectionRange(0, 99999); let success = false;
        try { navigator.clipboard.writeText(rawMarkdownOutput.value).then(() => { success = true; }).catch(err => { console.error('Async Clipboard API failed: ', err); }); }
        catch (err) { console.warn('Async Clipboard API not supported:', err); try { success = document.execCommand('copy'); } catch (e) { console.error('execCommand failed: ', e); } }
        const originalText = translations['copyButton'][currentLang] || 'Copy Markdown';
        if (success) { copyButton.textContent = translations['copiedSuccess'][currentLang] || 'Copied!'; }
        else { copyButton.textContent = translations['copyError'][currentLang] || 'Copy Error'; alert(translations['copyManual'][currentLang] || 'Failed to copy. Please copy manually.'); }
        setTimeout(() => { copyButton.textContent = originalText; }, 1500);
    });
    downloadButton.addEventListener('click', () => {
        try {
            const markdownContent = generateMarkdown(); const blob = new Blob([markdownContent], { type: 'text/markdown;charset=utf-8' }); const url = URL.createObjectURL(blob); const link = document.createElement('a'); link.setAttribute('href', url);
            const filenameBase = inputs.title.value.trim().replace(/[^a-z0-9\s_-]/gi, '').replace(/\s+/g, '-') || 'README'; link.setAttribute('download', `${filenameBase.toLowerCase()}.md`);
            document.body.appendChild(link); link.click(); document.body.removeChild(link); URL.revokeObjectURL(url);
        } catch (e) { console.error("Download failed:", e); alert(translations['downloadError'][currentLang] || 'Failed to create download file.'); }
    });

    // === –ü–ï–†–í–û–ù–ê–ß–ê–õ–¨–ù–´–ô –ó–ê–ü–£–°–ö ===
    const initialBlock = inputs.dynamicBlocksContainer.querySelector('.dynamic-block');
    if (initialBlock) { initialBlock.remove(); }
    setLanguage(currentLang); // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —è–∑—ã–∫
    displayBadgeParams(); // –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –±–µ–π–¥–∂–µ–π
    // updatePreview() –≤—ã–∑—ã–≤–∞–µ—Ç—Å—è –≤–Ω—É—Ç—Ä–∏ setLanguage()
});